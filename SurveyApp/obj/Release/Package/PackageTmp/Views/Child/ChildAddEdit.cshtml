@using SurveyApp.Models;
@using System.Data;
@{
    ViewBag.Title = "eBit - Child Information Editor";
    Layout = "~/Views/Shared/_Layout.cshtml";

    string datepick = Model.Id <= 0 ? "$('#dob').val('');" : "";

    if (Model.Id > 0)
    {
        DataSet ds = SurveyApp.DataHelper.Child_Study_TeacherGetAll(Model.Id);
        dtStudies = ds != null && ds.Tables[0].Rows.Count > 0 ? ds.Tables[0] : null;
        dtTeachers = ds != null && ds.Tables[1].Rows.Count > 0 ? ds.Tables[1] : null;
        dtSchedules = ds != null && ds.Tables[2].Rows.Count > 0 ? ds.Tables[2] : null;
    }

    DataSet dsTeachers = Child_Teacher.Child_TeacherGetAll();
}
@model SurveyApp.Models.Child

@functions{
    DataTable dtStudies, dtTeachers, dtSchedules;
    public string getStudyStatus(int studyId)
    {
        if (dtStudies != null)
        {
            foreach (DataRow dr in dtStudies.Rows)
            {
                if (Convert.ToInt32(dr["StudyId"]) == studyId)
                {
                    return "checked='checked'";
                }
            }
        }

        return "";
    }

    public string getTeacherStatus(int UserId, int studyId)
    {
        if (dtTeachers != null)
        {
            foreach (DataRow dr in dtTeachers.Rows)
            {
                if (Convert.ToInt32(dr["RespondentId"]) == UserId && Convert.ToInt32(dr["StudyId"]) == studyId)
                {
                    return "checked='checked'";
                }
            }
        }

        return "";
    }

    public string getParentStatus(int studyId)
    {
        if (dtStudies != null)
        {
            foreach (DataRow dr in dtStudies.Rows)
            {
                if (Convert.ToInt32(dr["StudyId"]) == studyId && Convert.ToBoolean(dr["IncludeParent"]) == true)
                {
                    return "checked='checked'";
                }
            }
        }

        return "";
    }

    public int getParentStatusValue(int studyId)
    {
        if (dtStudies != null)
        {
            foreach (DataRow dr in dtStudies.Rows)
            {
                if (Convert.ToInt32(dr["StudyId"]) == studyId && Convert.ToBoolean(dr["IncludeParent"]) == true)
                {
                    return 1;
                }
            }
        }

        return 0;
    }

    public string getScheduleStatus(int studyId, int scheduleId, string col, string type, int value) {
        if (dtSchedules != null && dtSchedules.Rows.Count > 0)
        {
            foreach (DataRow dr in dtSchedules.Rows)
            {
                if ((int)dr["StudyId"] == studyId && (int)dr["ScheduleId"] == scheduleId)
                {
                    if ((int)dr[col] == value)
                    {
                        if (type == "radio")
                        {
                            return "checked='checked'";
                        }
                        if (type == "select")
                        {
                            return "selected='selected'";
                        }
                    }
                }
            }
        }

        return "";
    }

    public string getConditionStatus(int studyId, int consentId)
    {
        if(Model != null && Model.Id > 0)
        {
            using (var csrContext = new Child_Study_RespondentContext())
            {
                Child_Study_Respondent obj = csrContext.Child_Study_Respondents.Where(csr => csr.StudyId == studyId && csr.ChildId == Model.Id).FirstOrDefault();
                if (obj != null)
                {
                    if (consentId == obj.ConsentId)
                    {
                        return "checked='checked'";
                    }
                }
            }
        }

        return "";
    }

}

<link href="~/Content/scroller/jquery.mCustomScrollbar.min.css" rel="stylesheet" />
<script src="~/Content/scroller/jquery.mCustomScrollbar.concat.min.js"></script>
<script src="~/Scripts/zxcvbn.js"></script>
<script src="~/Scripts/pwstrength.js"></script>

<h2><a href="javascript:void(0);" id="back" class="btnBack"></a> &nbsp;Child Information Editor</h2>

<style type="text/css">
    ._panel { background: #fafafa; border: solid 1px #cccccc; padding: 10px; border-radius: 6px; }
    .msg.green {
        color: #00cc00;
        margin: 0px 0px 6px 0px;
    }
    .msg.red {
        color: #cc0000;
        margin: 0px 0px 6px 0px;
    }
    a.viewResp{
        color: #23527c;
        text-decoration: underline;
        font-size: 12px;
    }
    .ui-tooltip {min-width:420px; max-width: 500px;background-color: #333; color: #FFF;}
    msg.green {
        color: #00cc00;
        margin: 0px 0px 6px 0px;
    }
    .msg.red {
        color: #cc0000;
        margin: 0px 0px 6px 0px;
    }
    .progress {
        margin-bottom: 0px;
        margin-top: 2px;
    }
    .password-verdict {
        position: absolute;
        bottom: 0px;
        left: 20px;
        color: #FFF;
    }
    .bootbox-body{
        max-height: 400px;
        overflow-y: auto;
    }
</style>
<br />

@using (Html.BeginForm("ChildAddEdit", "Child", FormMethod.Post, new { id = "frmAddChild", @class = "form-horizontal", style = "width: 800px;padding-left: 24px;" }))
{
    <div class="childInfo">
        <div style="width: 100%;">
            @Html.ValidationSummary()
            @Html.HiddenFor(m => m.Id, new { name = "hdnChildId", value = Model.Id })
            <input type="hidden" id="hdnSendEmail" name="hdnSendEmail" value="true" />
            <input type="hidden" id="hdnSendConsentEmail" name="hdnSendConsentEmail" value="false" />
            
            <div class="form-group">
                <label class="control-label col-sm-3" for="email">Name:*</label>
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Name, new { placeholder = "Enter Name", @class = "form-control", @maxlength = "100" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-3" for="pwd">Date of Birth:*</label>
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.dob, "{0:MM/dd/yyyy}", new { type = "text", placeholder = "Enter DOB", @class = "form-control datepicker", max = @DateTime.Now.ToString(@"MM/dd/yyyy") })
                </div>
                <div style="display:none;">, "{0:yyyy-MM-dd}"</div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-3" for="gender">Gender:*</label>
                <div class="col-sm-9">
                    <div class="radio-inline"><label>@Html.RadioButtonFor(m => m.Gender, "1", new { name = "optradio" })Male</label></div>
                    <div class="radio-inline"><label>@Html.RadioButtonFor(m => m.Gender, "2", new { name = "optradio" })Female</label></div>
                    <div class="radio-inline"><label>@Html.RadioButtonFor(m => m.Gender, "3", new { name = "optradio" })Unspecified</label></div>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-sm-3" for="school">Status:*</label>
                <div class="col-sm-9">
                    @Html.DropDownListFor(m => m.StatusId, new SelectList(EnrollmentStatus.EnrollmentStatus_GetAll(), "Id", "Status"), "Select Status", new { id = "ddlEnrollmentStatus", @class = "form-control", onchange = "setEnrollmentDate();" })
                </div>
            </div>
            <div style="display:none;">
                <div class="form-group enrollmentDate" style="display:none;">
                    <label class="control-label col-sm-3" for="school">Enrollment Date:*&nbsp;<i class="ion-help-circled" title="If enrollment date is not selected already and you are not sure about the enrollment date then please select today's date." data-toggle="tooltip"></i></label>
                    <div class="col-sm-9">
                        @Html.TextBoxFor(m => m.EnrollmentDate, "{0:MM/dd/yyyy}", new { type = "text", placeholder = "Enter Enrollment Date", @class = "form-control datepicker", max = @DateTime.Now.ToString(@"MM/dd/yyyy") })
                    </div>
                </div>
            </div>
            <div class="form-group" style="display:none;">
                <label class="control-label col-sm-3" for="school">Child's Consent Required?:</label>
                <div class="col-sm-9">
                    @Html.CheckBoxFor(m => m.Consent, new { name = "chkConsent", onclick = "setConsentEmail(this);", @style = "margin-top: 9px;" })
                </div>
            </div>
            <div class="form-group email _panel" style="display:none;">
                <label class="control-label col-sm-3" for="school">Child's Email:</label>
                <div class="col-sm-9">
                    @Html.TextBoxFor(m => m.Email, new { placeholder = "Email address for consent", @class = "form-control", @maxlength = "100" })
                </div>
            </div>

            <!-- STUDENT -->
            <div class="form-group" style="display:none;">
                <label class="control-label col-sm-3">Create Account for Child?:</label>
                <div class="col-sm-9" data-toggle="tooltip" title="Please select this option if student account has not been created already.">
                    @Html.CheckBoxFor(m => m.Account, new { name = "chkAccount", onclick = "setStudentAccount(this);", @style = "margin-top: 9px;" })
                </div>
            </div>
            <div id="addStudent" class="_panel form-group" style="display:none;">
                <div class="msg"></div>                
                <div class="form-group">
                    <label class="control-label col-sm-3" for="regEmail">Email:*</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control txtUserName" id="regEmail" name="regEmail" placeholder="Email" value="@Model.Email" onkeyup="checkEmailValidation(this);">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-3" for="parent">Password:*</label>
                    <div class="col-sm-9">
                        <input type="password" class="form-control txtPassword" id="regPassword" name="regPassword" placeholder="Password" onkeyup="checkPwdValidation(this);">
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-sm-3" for="parent">Confirm Password:*</label>
                    <div class="col-sm-9">
                        <input type="password" class="form-control txtConfirmPassword" id="regConfirmPassword" name="regConfirmPassword" placeholder="Confirm Password" onkeyup="checkPwdValidation(this);">
                    </div>
                </div>                
            </div>
            <!-- STUDENT -->

            <!-- INTERESTING STUFF STARTS HERE -->
            <div class="form-group">
                <label class="control-label col-sm-3" for="school">School:*</label>
                <div class="col-sm-9">
                    @Html.DropDownListFor(m => m.SchoolId, new SelectList(School.SchoolGetByUser(WebSecurity.CurrentUserId), "SchoolId", "Name"), "Select School", new { id = "ddlSchools", @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-sm-3" for="teacher">Study(s):*</label>
                <div class="col-sm-9">
                    <div class="checklist" style="max-height: 250px;">
                        @foreach (Study std in Study.StudyGetAllByUserId(WebSecurity.CurrentUserId))
                        {
                            <div class="checker" id="studyId_@std.Id">
                                <label onclick="setDeviation(this);" class="study" style="text-transform: capitalize;">
                                    <input type="checkbox" @getStudyStatus(std.Id) name="StudyId_@std.Id" value="@std.Id" /> @std.Name
                                    <a href="javascript:void(0);" onclick="showRespondents(this, @std.Id, '@std.Name.Replace("\'", "").Replace("\"", "")');" class="viewResp">Respondents</a>
                                </label>
                                <label style="float: right;padding: 0px 6px 0px 0px;" class="deviation" onchange="showScheduleInfo(this, @std.Id);">
                                    <input type="checkbox" name="StudyIdDeviate_@std.Id" value="@std.Id" />Deviate
                                </label>
                                                                
                                <div id="divStudy@(std.Id)" style="display:none;" class="studyInfo">
                                    @{ DataSet dsSchedules = SurveyApp.DataHelper.ScheduleDeviationGetSchedules(std.Id); }
                                    @foreach (DataRow drSchedule in dsSchedules.Tables[0].Rows)
                                    {

                                        <div id="divSchedule@(drSchedule["ScheduleID"])" class="schedule _panel" scheduleid="@(drSchedule["ScheduleID"])" style="padding-bottom: 4px; margin-bottom: 10px;">
                                            <div class="form-group"><label class="col-sm-6"><b>@drSchedule["Title"]</b></label></div>
                                            <div id="divErrors" class="validation-summary-errors" style="display:none;">
                                                <ul></ul>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-sm-3">Active On:</label>
                                                <div class="col-sm-9">
                                                    <div class="radio-inline"><label><input id="ActiveOn" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "ActiveOn", "radio", 1) name="ActiveOn_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" onclick="$('#divSpecify_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])').hide();" type="radio" value="1">Enrollment</label></div>
                                                    <div class="radio-inline"><label><input id="ActiveOn" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "ActiveOn", "radio", 2) name="ActiveOn_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" onclick="$('#divSpecify_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])').show();" type="radio" value="2">Specify</label></div>
                                                </div>
                                            </div>

                                            <div id="divSpecify_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" class="form-group specifyParent" style="display:none;">
                                                <label class="control-label col-sm-4">Specify Period:</label>
                                                <div class="col-sm-8">
                                                    <div class="specify" data-toggle="tooltip" title="Please note this selection will be applicable for the future dates.">
                                                        <table cellpadding="0" cellspacing="0" style="width:100%;">
                                                            <tbody>
                                                                <tr>
                                                                    <td>
                                                                        <div class="monthly">
                                                                            <select class="form-control specification inerror" id="ddlDays" name="ddlDays_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" onchange="setPeriodSpecification(this, '_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])', 1);" style="width: 44%;display: inline-block;">
                                                                                <option value="0" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "Day", "select", 0)>Day</option>
                                                                                @foreach (ScheduleDay objSD in ScheduleDay.GetScheduleDays())
                                                                                {
                                                                                    <option value="@objSD.Value" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "Day", "select", objSD.Value)>@objSD.Id</option>
                                                                                }
                                                                            </select>
                                                                            <select class="form-control specification inerror" id="ddlMonths" name="ddlMonths_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" onchange="setPeriodSpecification(this, '_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])', 1);" style="width: 47%;display: inline-block;">
                                                                                <option value="0" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "Month", "select", 0)>Month</option>
                                                                                @foreach (ScheduleMonth objSM in ScheduleMonth.GetScheduleMonths())
                                                                                {
                                                                                    <option value="@objSM.Id" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "Month", "select", objSM.Id)>@objSM.Month</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </td>
                                                                    <td style="text-align:center;"><b>&nbsp;OR&nbsp;</b></td>
                                                                    <td>
                                                                        <div class="weekly">
                                                                            <select class="form-control specification inerror" id="ddlWeekdays" name="ddlWeekdays_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" onchange="setPeriodSpecification(this, '_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])', 2);">
                                                                                <option value="0" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "Weekday", "select", 0)>Weekday</option>
                                                                                @foreach (ScheduleWeekday objSW in ScheduleWeekday.GetScheduleWeekdays())
                                                                                {
                                                                                    <option value="@objSW.Id" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "Weekday", "select", objSW.Id)>@objSW.Weekday</option>
                                                                                }
                                                                            </select>
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                                <tr>
                                                                    <td colspan="3">
                                                                        <div style="margin-top: 10px;border-top: solid 1px #CCC;padding-top: 10px;">
                                                                            <label class="control-label col-sm-5">Starting Year:*</label>
                                                                            <div class="col-sm-7">
                                                                                <div class="startingyear">
                                                                                    <select class="form-control specification inerror" id="ddlStartingYear" name="ddlStartingYear_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])" onchange="setPeriodSpecification(this, '_StudyId_@(std.Id)_ScheduleId_@(drSchedule["ScheduleID"])', 3);">
                                                                                        <option value="0" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "StartingYear", "select", 0)>Select Year</option>
                                                                                        @foreach (ScheduleYear objSY in ScheduleYear.GetScheduleYears())
                                                                                        {
                                                                                            <option value="@objSY.Id" @getScheduleStatus(std.Id, (int)drSchedule["ScheduleID"], "StartingYear", "select", objSY.Id)>@objSY.Year</option>
                                                                                        }
                                                                                    </select>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (dsSchedules.Tables[0].Rows.Count == 0)
                                    {
                                        <div class="form-group">
                                            <div class="col-sm-offset-0 col-sm-9" style="color: #E4002E;">
                                                There is not schedule associated with this study.
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="teachers" style="max-height: 220px;display:none;">
                                    @{ int conCount = 0;}
                                    @using (var conContext = new ConsentContext())
                                    {
                                        List<Consent> lstConsents = conContext.Consents.Where(con => con.StudyId == std.Id).ToList();
                                        conCount = lstConsents.Count;
                                        if (conCount > 0)
                                        {
                                            <div class="conditions col-sm-12">
                                                <div class="form-group">
                                                    <label class="control-label col-sm-2" for="Condition">Condition:</label>
                                                    <div class="col-sm-10">
                                                        @foreach (Consent obj in lstConsents)
                                                        {
                                                            <div class="radio-inline"><label><input id="Condition_@(obj.Id)_StudyId_@std.Id" @getConditionStatus(std.Id, obj.Id) name="Condition_StudyId_@std.Id" type="radio" value="Condition_@(obj.Id)_StudyId_@std.Id">@obj.Title</label></div>
                                                        }                                                        
                                                    </div>
                                                </div>
                                            </div>
                                            <br />
                                        }
                                    }

                                    <div class="studyTeachers" concount="@conCount">
                                        <div><input type="text" id="txtSearch" style="margin-bottom: 10px;" class="form-control" onkeyup="searchTeachers(this);" placeholder="Search Respondents" /></div>
                                        @{ int index = 0; }
                                        @foreach (System.Data.DataRow dr in dsTeachers.Tables[0].Rows)
                                        {
                                            if (index == 0)
                                            {
                                                <div class="resp"><label><input type="checkbox" @getParentStatus(std.Id) id="StudyId_@(std.Id)_IncludeParent" name="StudyId_@(std.Id)_IncludeParent" value="@getParentStatusValue(std.Id)" /> Include Parent?</label></div>
                                            }
                                            <div class="resp"><label><input type="checkbox" @getTeacherStatus((int)dr["UserId"], std.Id) id="StudyId_@(std.Id)_TeacherId_@dr["UserId"]" name="StudyId_@(std.Id)_TeacherId_@dr["UserId"]" value="@dr["UserId"]" /> @(dr["FullName"]) @(dr["RoleName"] != DBNull.Value && dr["RoleName"].ToString() == "Student" ? " (Student)" : "")</label></div>
                                            index++;
                                        }
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                    @Html.ActionLink("Add Study", "StudyAddEdit", "Study", new object { }, new { @class = "btn btn-link" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-sm-3" for="parent">Parent:*</label>
                <div class="col-sm-9">
                    @Html.DropDownListFor(m => m.ParentId, new SelectList(SurveyApp.DataHelper.Parent_GetAll(), "UserId", "FullName"), "Select Parent", new { id = "ddlParents", @class = "form-control" })                    
                </div>
            </div>
                                  
            <div class="form-group">
                <div class="col-sm-offset-3 col-sm-9" style="margin-top:10px;">
                    <button type="submit" id="btnSaveChild" class="btn btn-default">Save Child Information</button>
                    <button type="button" class="btn btn-default" onclick="location.href='@Url.Action("Index", "Child")';">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">
    var isConsetEmailSet = false;
    var isRespondentEmailSet = false;

    $(function () {
        $('[data-toggle="tooltip"]').tooltip({
            content: function () {
                return $(this).attr('title').replace(/<br\/>/g, "<br/>");
            },
        });

        setEnrollmentDate();

        setConsentEmail($("#Consent"));

        @Html.Raw(datepick)
        $("#frmAddChild").find("input[type=text], input[type=password], select").on("change", function () { resetErrorStatus(this); });
        $("#frmAddChild").find("input[type=text], input[type=password]").on("keyup", function () { resetErrorStatus(this); });
        $(".datepicker").datepicker({ maxDate : @(DateTime.Now.ToString("MM/dd/yyyy")), changeYear: true, yearRange: "-120:+0" });

        $(".checklist").find("label.study").each(function (index, obj) {
            setDeviation(obj);
        });

        $(".checklist").mCustomScrollbar({
            scrollButtons: { enable: true },
            theme: "dark-thick",
            scrollInertia: 700,
            scrollbarPosition: "inside"
        });

        $("#btnSaveChild").click(function (e) {
            $(".checklist .checker").removeClass("inerror");
            var isTeacherSelected = false;
            $(".checklist .checker").each(function(i, objI){
                if($(objI).find(".study").find("input[type=checkbox]")[0].checked == true){
                    var isSdtyVld = false;
                    $(objI).find(".studyTeachers").find(".resp").each(function(j, objJ){
                        if($(objJ).find("input[type=checkbox]")[0].checked == true){
                            isTeacherSelected = true;
                            isSdtyVld = true;
                        }
                    });

                    if(isSdtyVld == false){
                        $(objI).addClass("inerror");
                    }
                }                
            });

            if(isTeacherSelected == false){
                bootbox.alert("Please select at least one respondent.");
                return false;
            }
            
            if($(".enrollmentDate").is(":visible") == true && $("#ddlEnrollmentYear option:selected").val() == ""){
                bootbox.alert("Please select enrollment year for the child.");
                return false;
            }

            e.preventDefault();
            $('.loading').show();
            $('.disablebackground').show();            
            
            showEmailMessage("Email Confirmation", "Would you like to send “assessment assignment” email to respondents?", 1);
            if($("#Consent")[0].checked == true){
                showEmailMessage("Consent Email Confirmation", "Would you like to send an email to this child asking about the consent agreement.", 2);
            }
            else{
                isConsetEmailSet = true;
            }
        });

        function showEmailMessage(title, msg, type){
            bootbox.dialog({
                message: msg,
                title: title,
                closeButton: false,
                onEscape: function() {
                    if(type == 1){
                        $("#hdnSendEmail").val(false);
                        isRespondentEmailSet = true;
                    }
                    if(type == 2){
                        $("#hdnSendConsentEmail").val(false);
                        isConsetEmailSet = true;
                    }
                    
                    if(isEmailOptionSet() == true){
                        $("#frmAddChild").submit();
                    }                    
                },
                buttons: {
                    success: {
                        label: "Send",
                        className: "btn-primary",
                        callback: function() {
                            if(type == 1){
                                $("#hdnSendEmail").val(true);
                                isRespondentEmailSet = true;
                            }
                            if(type == 2){
                                $("#hdnSendConsentEmail").val(true);
                                isConsetEmailSet = true;
                            }

                            if(isEmailOptionSet() == true){
                                $("#frmAddChild").submit();
                            }
                        }
                    },
                    danger: {
                        label: "Don't Send",
                        className: "btn-default",
                        callback: function() {
                            if(type == 1){
                                $("#hdnSendEmail").val(false);
                                isRespondentEmailSet = true;
                            }
                            if(type == 2){
                                $("#hdnSendConsentEmail").val(false);
                                isConsetEmailSet = true;
                            }

                            if(isEmailOptionSet() == true){
                                $("#frmAddChild").find("input[type=checkbox]").each(function(index, obj){
                                    if($(obj).attr("checked") == "checked"){
                                        $(obj)[0].checked = true;
                                    }
                                });
                                $("#frmAddChild").submit();
                            }                            
                        }
                    }
                }
            });
        }

        $(".btnBack").click(function(){
            bootbox.dialog({
                message: "Would you like to save the changes?",
                title: "Save Changes!",
                closeButton: false,
                onEscape: function() {
                    location.href = "@Url.Action("Index", "Child")";
                },
                buttons: {
                    success: {
                        label: "Yes",
                        className: "btn-primary",
                        callback: function() {
                            $("#btnSaveChild").click();
                        }
                    },
                    danger: {
                        label: "No",
                        className: "btn-default",
                        callback: function() {
                            location.href = "@Url.Action("Index", "Child")";
                        }
                    }
                }
            });
        });
    });

    function isEmailOptionSet(){
        if(isConsetEmailSet == false || isRespondentEmailSet == false){
            return false;
        }

        return true;
    }

    function resetErrorStatus(elem) {
        if ($(elem).val() == "0" || $(elem).val() == "") {
            $(elem).addClass("inerror");
        }
        else {
            $(elem).removeClass("inerror");
        }
    }

    function RegisterModel() {
        this.UserName;
        this.Password;
        this.FullName;
    }

    function addParentTeacher(type) {
        var div = "#addStudent";
        var msg = $(div).find(".msg");

        var txtUserName = $(div).find(".txtUserName");
        var txtPassword = $(div).find(".txtPassword");
        var txtConfirmPassword = $(div).find(".txtConfirmPassword");
        var txtFullName = $(div).find(".txtFullName");


        var isError = false;
        if (txtUserName.val() == "") {
            txtUserName.addClass("inerror");
            isError = true;
        }
        if (txtPassword.val() == "") {
            txtPassword.addClass("inerror");
            isError = true;
        }
        if (txtConfirmPassword.val() == "") {
            txtConfirmPassword.addClass("inerror");
            isError = true;
        }
        if (txtFullName.val() == "") {
            txtFullName.addClass("inerror");
            isError = true;
        }

        if (isError == false && validateEmail(txtUserName.val()) == false) {
            msg.removeClass("green").addClass("red");
            msg.html("Please provide valid email address.");
            txtUserName.addClass("inerror").focus();
            return false;
        }

        if (isError == false && (txtPassword.val() != txtConfirmPassword.val())) {
            txtPassword.addClass("inerror");
            txtConfirmPassword.addClass("inerror").focus();
            msg.removeClass("green").addClass("red");
            msg.html("Password and Confirm Password should match.");
            return false;
        }

        if (isError == true) {
            msg.removeClass("green").addClass("red");
            msg.html("Please provide the following information.");
            $(div).find(".inerror").first().focus();
            return false;
        }

        var objUser = new RegisterModel();
        objUser.UserName = txtUserName.val();
        objUser.Password = txtPassword.val();
        objUser.FullName = txtFullName.val();

        $.ajax({
            url: '@Url.Action("AddParentTeacher", "Child")',
            data: "{'objUser': '" + JSON.stringify(objUser) + "', 'role': '"+ type +"' }",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                msg.empty();
                if (data.success == true) {
                    if (data.UserId > 0) {
                        if (type == "Parent") {
                            $("#ddlParents").append("<option value='" + data.UserId + "'>" + objUser.FullName + "</option>");
                        }
                        else if (type == "Teacher") {
                            $(".teachers").append("<div><label><input type='checkbox' checked='checked' name='TeacherId_" + data.UserId + "' value='" + data.UserId + "' /></label>" + objUser.FullName + "</div>");
                        }

                        txtUserName.val("").removeClass("inerror");
                        txtPassword.val("").removeClass("inerror");
                        txtConfirmPassword.val("").removeClass("inerror");
                        txtFullName.val("").removeClass("inerror");

                        msg.removeClass("red").addClass("green");
                        msg.html(objUser.FullName + " is successfully added.");
                    }
                }
                else {
                    msg.removeClass("green").addClass("red");
                    msg.html(data.msg);
                    checkTimeout(data, 1);
                }
            },

            //Options to tell JQuery not to process data or worry about content-type
            cache: false,
            processData: false
        });
    }


    function School() {
        this.Name = "";
    }

    function addSchool() {
        var div = "#addSchool";
        var msg = $(div).find(".msg");

        var txtSchoolName = $(div).find(".txtSchoolName");
        if (txtSchoolName.val() == "") {
            msg.removeClass("green").addClass("red");
            msg.html("Please provide the following information.");

            txtSchoolName.addClass("inerror");
            $(div).find(".inerror").first().focus();
            return false;
        }

        var objSchool = new School();
        objSchool.Name = txtSchoolName.val();

        $.ajax({
            url: '@Url.Action("addSchool", "School")',
            data: "{'objSchool': '" + JSON.stringify(objSchool) + "' }",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                msg.empty();
                if (data.success == true) {
                    $("#ddlSchools").append("<option value='" + data.schoolId + "'>" + objSchool.Name + "</option>");
                    $("#ddlSchools").val(data.schoolId);
                    txtSchoolName.val("");

                    msg.removeClass("red").addClass("green");
                    msg.html(objSchool.Name + " is successfully added.");
                }
                else {
                    msg.removeClass("green").addClass("red");
                    msg.html(data.msg);
                    checkTimeout(data, 1);
                }
            },

            //Options to tell JQuery not to process data or worry about content-type
            cache: false,
            processData: false
        });
    }

    function setDeviation(elem) {
        var isChecked = $(elem).find("input[type=checkbox]")[0].checked;
        if (isChecked == true) {
            $(elem).siblings("label.deviation").fadeIn();

            $(elem).siblings(".studyInfo").find("input[type=radio]").each(function (index, obj) {
                if ($(obj)[0].checked == true) {
                    $(elem).siblings("label").find("input[type=checkbox]")[0].checked = true;
                    $(elem).siblings(".studyInfo").slideDown();

                    $(obj).click();

                    var ddlDays = $(obj).closest("div.schedule").find(".specifyParent").find(".specify").find("#ddlDays");
                    var ddlMonths = $(obj).closest("div.schedule").find(".specifyParent").find(".specify").find("#ddlMonths");
                    var ddlWeekdays = $(obj).closest("div.schedule").find(".specifyParent").find(".specify").find("#ddlWeekdays");
                    var ddlStartingYear = $(obj).closest("div.schedule").find(".specifyParent").find(".specify").find("#ddlStartingYear");

                    if (ddlDays.val() != "0") {
                        ddlDays.removeClass("inerror");
                    }
                    if (ddlMonths.val() != "0") {
                        ddlMonths.removeClass("inerror");
                    }
                    if (ddlWeekdays.val() != "0") {
                        ddlWeekdays.removeClass("inerror");
                    }
                    if (ddlStartingYear.val() != "0") {
                        ddlStartingYear.removeClass("inerror");
                    }

                    if (ddlDays.val() != "0" && ddlMonths.val() != "0") {
                        ddlWeekdays.val(0);
                        ddlWeekdays.removeClass("inerror");
                    }
                    else {
                        if (ddlWeekdays.val() != "0") {
                            ddlDays.val(0);
                            ddlDays.removeClass("inerror");

                            ddlMonths.val(0);
                            ddlMonths.removeClass("inerror");
                        }
                    }
                }
            });

            $(elem).find(".viewResp").fadeIn();
        }
        else {
            $(elem).closest(".checker").removeClass("inerror");

            $(elem).siblings("label").find("input[type=checkbox]")[0].checked = false;
            $(elem).siblings(".teachers").find("input[type=checkbox]").each(function(index, obj){
                $(obj)[0].checked = false;
                $(obj).removeAttr("checked");
            });
            $(elem).siblings(".teachers").find("input[type=radio]").each(function(index, obj){
                $(obj)[0].checked = false;
                $(obj).removeAttr("checked");
            });
            
            $(elem).siblings("label.deviation").fadeOut();
            $(elem).siblings(".studyInfo").fadeOut();
            $(elem).find(".viewResp").fadeOut();
        }
    }


    function showScheduleInfo(elem, id) {
        var isChecked = false;
        isChecked = $(elem).find("input[type=checkbox]")[0].checked;
        if(isChecked == true){
            $(elem).siblings("#divStudy" + id).slideDown();

            $(elem).siblings("#divStudy" + id).find(".schedule").each(function (index, obj) {
                $(obj).find("input[type=radio]").each(function (indexR, objR) {
                    if ($(objR).attr("checked") == "checked" && $(objR).val() == "2") {
                        $(obj).find(".specifyParent").show();
                    }
                });
            });
        }
        else {
            showChildInfo(id, 2);
            $(elem).siblings("#divStudy" + id).slideUp();
        }
    }

    function showChildInfo(id, type) {
        var divStudy = $("#divStudy" + id);
        if (type == 2) {
            divStudy.find(".schedule").each(function (index, obj) {
                $(obj).find("input[type=radio]").removeAttr("checked");
                $(obj).find(".specification").val(0);
                $(obj).find(".specifyParent").hide();
            });
        }
    }

    function setPeriodSpecification(elem, id, type) {
        if ($(elem).val() == "0") {
            $(elem).addClass("inerror");
        }
        else {
            $(elem).removeClass("inerror");
        }

        if (type == 1) {
            $("#divSpecify" + id).find("#ddlWeekdays").val("0");
            $("#divSpecify" + id).find("#ddlWeekdays").removeClass("inerror");

            if ($("#divSpecify" + id).find("#ddlDays").val() == "0") {
                $("#divSpecify" + id).find("#ddlDays").addClass("inerror");
            }
            if ($("#divSpecify" + id).find("#ddlMonths").val() == "0") {
                $("#divSpecify" + id).find("#ddlMonths").addClass("inerror");
            }
        }
        if (type == 2) {
            $("#divSpecify" + id).find("#ddlDays").val("0");
            $("#divSpecify" + id).find("#ddlMonths").val("0");

            $("#divSpecify" + id).find("#ddlDays").removeClass("inerror");
            $("#divSpecify" + id).find("#ddlMonths").removeClass("inerror");
        }
        if(type == 3){            
            if ($("#divSpecify" + id).find("#ddlStartingYear").val() == "0") {
                $("#divSpecify" + id).find("#ddlStartingYear").addClass("inerror");
            }
            else{                
                $("#divSpecify" + id).find("#ddlStartingYear").removeClass("inerror");
            }
        }
    }

    function setConsentEmail(elem){        
        if($(elem)[0].checked == true){
            $(".email").slideDown();
        }
        else{            
            $(".email").slideUp();
            $(elem).removeAttr("checked");
            $("#Email").val("");
        }
    }

    function setEnrollmentDate(){
        var enStatus = $("#ddlEnrollmentStatus option:selected").val();
        if(enStatus == "1"){
            $(".enrollmentDate").slideDown();
        }
        else{
            $(".enrollmentDate").slideUp();
        }
    }
</script>
<script type="text/javascript">
    function showRespondents(elem, studyId, studyName){
        var childId = @Model.Id;
        var html = $("#studyId_" + studyId).find(".teachers").html();
        $(".studyTeachers").find(".resp").show();

        bootbox.dialog({
            title: "<span style='text-transform:capitalize;'>" + studyName + " - Respondents</span>",
            closeButton: false,
            onEscape: function() {

            },
            buttons: {
                success: {
                    label: "Save Changes",
                    className: "btn-primary",
                    callback: function() {
                        var isValid = true;
                        if($(".bootbox-body .studyTeachers").attr("concount") > 0){
                            isValid = false;
                            $(".bootbox-body .conditions input[type=radio]").each(function(){
                                if($(this)[0].checked == true){
                                    $("#studyId_" + studyId).find(".conditions").find("#" + $(this).attr("id")).attr("checked", "checked");
                                    $("#studyId_" + studyId).find(".conditions").find("#" + $(this).attr("id"))[0].checked = true;
                                    isValid = true;
                                    return false;
                                }
                            });
                        }

                        if(isValid == true) {
                            var isRespondentValid = false;
                            $(".bootbox-body .studyTeachers input").each(function(){
                                if($(this)[0].checked == true){
                                    $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id")).attr("checked", "checked");
                                    if($("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id"))[0] != null && $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id"))[0] != undefined){
                                        $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id"))[0].checked = true;
                                    }
                                    if($(this).attr("id").indexOf("_IncludeParent") >= 0){
                                        $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id")).val("1");
                                    }

                                    isRespondentValid = true;
                                }
                                else{
                                    $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id")).removeAttr("checked");
                                    if($(this).attr("id").indexOf("_IncludeParent") >= 0){
                                        $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id")).val("0");
                                    }
                                }
                            });

                            if(isRespondentValid == false){
                                bootbox.alert("Please include parent or select at least one teacher.");
                                return false;
                            }
                        }
                        else{
                            bootbox.alert("Please select at least one condition.");
                            return false;
                        }

                    }
                },
                danger: {
                    label: "Cancel",
                    className: "btn-default",
                    callback: function() {
                        var isEmpty = true;
                        $(".bootbox-body .studyTeachers input[type=checkbox]").each(function(){                            
                            if($(this)[0].checked == true){
                                isEmpty = false;
                            }
                        });
                        if(isEmpty == true){                            
                            $("#studyId_" + studyId).find("label.study").find("input[type=checkbox]").checked = false;
                            $("#studyId_" + studyId).find("label.study").find("input[type=checkbox]").removeAttr("checked");
                            setDeviation($("div#studyId_" + studyId).find("label.study"));

                            $(".bootbox-body input").checked = false;
                            $(".bootbox-body input").removeAttr("checked");
                        }
                    }
                }
            },
            message: html
        });

        $(".bootbox-body").mCustomScrollbar({
            scrollButtons: { enable: true },
            theme: "dark-thick",
            scrollInertia: 700,
            scrollbarPosition: "inside"
        });
        //$(".bootbox-body .studyTeachers input").each(function(){
        //    var ischecked = $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id"))[0].checked;
        //    if(ischecked == false){
        //        var isSet = $("#studyId_" + studyId).find(".studyTeachers #" + $(this).attr("id")).attr("teacherselected");
        //        $(".bootbox-body .studyTeachers").find($(this))[0].checked = isSet == "true" ? true : false;
        //    }
        //});
    }

    function searchTeachers(elem){
        var key = $(elem).val().toLowerCase();
        $(elem).closest(".studyTeachers").find(".resp").each(function(index, obj){
            var txt = $(obj).find("label").text().toLowerCase();

            if(txt.indexOf(key) >= 0 || txt.indexOf("include parent") == true || key == ""){
                $(obj).show();
            }
            else{
                $(obj).hide();
            }
        });
    }
</script>

<script type="text/javascript">
    $(function(){
        @{ bool isEnabled = true; }
        @if(Model.Account == true && Model.Id > 0){
            isEnabled = false;
        }
        var isEn = @(isEnabled == true ? "true" : "false");

        if(isEn == true){
            var options = {};
            options.common = {
                zxcvbn: true,
                zxcvbnTerms: ['samurai', 'shogun', 'bushido', 'daisho', 'seppuku']
            };
            $("#regPassword").pwstrength(options);
        }
        else{
            disableAccount();
        }

        setStudentAccount($("#Account"));

    });

    function disableAccount(){
        $("#Account").attr("disabled", "disabled");
        $("#regEmail").attr("disabled", "disabled");
        $("#regPassword").val("*********");
        $("#regConfirmPassword").val("*********");

        $("#regPassword").attr("disabled", "disabled");
        $("#regConfirmPassword").attr("disabled", "disabled");        
    }

    function setStudentAccount(elem){
        var isChecked = $(elem)[0].checked;
        if(isChecked == true){
            $("#addStudent").slideDown();
            if($("#Email") != "" && "@Model.Email" == ""){
                $("#regEmail").val($("#Email").val());
            }
        }
        else{
            $("#addStudent").slideUp();
            $("#regEmail").val("");
            $("#regPassword").val("");
            $("#regConfirmPassword").val("");
        }
    }

    function checkPwdValidation(elem){
        $(".msg").removeClass("red");
        $(".msg").html("");

        if($("#regPassword").val() != "" && $("#regConfirmPassword").val() != "" && $("#regPassword").val() != $("#regConfirmPassword").val()){
            $(".msg").addClass("red");
            $(".msg").html("Both passwords do not match.");
        }
    }

    function checkEmailValidation(elem){
        if(validateEmail($(elem).val()) == false){
            $(".msg").addClass("red");
            $(".msg").html("Email is not valid.");
        }
    }

</script>
